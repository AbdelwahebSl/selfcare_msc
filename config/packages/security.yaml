security:
    enable_authenticator_manager: true
    role_hierarchy:
      #ROLE_USER: ROLE_USER
      ROLE_ADMIN: [ROLE_ADMIN, ROLE_MKG]
    access_denied_url: /login
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\SelfcareUser:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\SelfcareUser
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            entry_point: App\Security\AuthenticationEntryPoint
            access_denied_handler: App\Security\AccessDeniedHandler
            lazy: true
            provider: app_user_provider
            custom_authenticators:
                - App\Security\LoginFormAuthenticator
            oauth:
                
                resource_owners:
                    azure: azure_login
                login_path: /oauth/login
                #use_forward: false
                failure_path: app_login
                default_target_path: my_profile
                oauth_user_provider:
                    service: my.oauth_aware.user_provider.service
            saml:
                identifier_attribute: 'Email' # Assurez-vous que cet attribut est unique
                # email_attribute: 'email' # Définissez l'attribut SAML utilisé pour l'email si nécessaire
                user_factory: saml_user_factory
                use_attribute_friendly_name: true
                check_path: saml_acs
                login_path: saml_login
                persist_user: true

#            custom_authenticator: App\Security\LoginAuthenticator
            form_login:
                login_path: app_login
                check_path: app_login
                default_target_path: app_login
                enable_csrf: true

            logout:
                path: app_logout


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ˆ/oauth/, roles: PUBLIC_ACCESS }
        - { path: ^/oauth/login, roles: PUBLIC_ACCESS }
        
      #- { path: ˆ/oauth/target, roles: ROLE_OAUTH_USER }
      
    #  - { path: ^/oauth/login/check-azure, roles: ['ROLE_USER', 'ROLE_STUDENT'] }
      
#     - { path: ^/admin-workshops, roles: ROLE_ADMIN }
#     - { path: ^/workshop/new, roles: ROLE_ADMIN }
#     - { path: ^/workshop/edit/, roles: ROLE_ADMIN }
#     - { path: ^/admin-themes, roles: ROLE_ADMIN }
#     - { path: ^/theme/new, roles: ROLE_ADMIN }
#     - { path: ^/theme/edit, roles: ROLE_ADMIN }
#     - { path: ^/admin-specialities, roles: ROLE_ADMIN }
#     - { path: ^/speciality/new, roles: ROLE_ADMIN }
#     - { path: ^/speciality/edit, roles: ROLE_ADMIN }
#     - { path: ^/admin-cart, roles: ROLE_ADMIN }
#     - { path: ^/admin-objectives, roles: ROLE_ADMIN }
#     - { path: ^/workshop/objective/new, roles: ROLE_ADMIN }
#     - { path: ^/workshop/objective/edit, roles: ROLE_ADMIN }
#     - { path: ^/admin-supports, roles: ROLE_ADMIN }
#     - { path: ^/workshop/support/new, roles: ROLE_ADMIN }
#     - { path: ^/workshop/support/edit, roles: ROLE_ADMIN }
#     -
#     - { path: ^/my-profile, roles: ROLE_STUDENT }

#    - { path: '^/', roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
